

	print_map(cipher);
    std::string result;
	std::cout << result;

	for(int i = 0; i < static_cast<int>(codedMessage.size()); i++){
		const char coded = codedMessage[i];
		std::_Rb_tree_const_iterator<std::pair<const char, char>> key_paar = cipher.find(coded);
		char key_first = key_paar->first;
		char key_second = key_paar->second;
        int key_first_value = static_cast<int>(key_first);
		int key_second_value = static_cast<int>(key_second);
		int result = key_first_value + key_second_value;
		char encoded = static_cast<char>(result);
        std::cout<<encoded;
	}
    return result;

    std::string result;
    std::map<char, int> dictionary;
    for(int i = 0; i < 10; i++)
        dictionary.emplace(std::make_pair(static_cast<int>(i),i));

    for(std::map<char,int>::value_type& elem:dictionary)
        std::cout<<elem.first<<" "<<elem.second<<"\n";

    return result;
